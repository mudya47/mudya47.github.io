@page "/"
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using VehicleMonitoringWebApp.Services
@using VehicleMonitoringWebApp.Models
@using VehicleMonitoringWebApp.Components
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@inject TransportLogService LogService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="wrapper">
    <!-- NAVBAR -->
    <nav class="header navbar">
        <div class="nav-left">
            <img src="css/img/odg-logo.png" class="logo" alt="Logo" />
            <NavLink href="/" class="nav-link" activeClass="active">Dashboard</NavLink>
            @*<a href="#" class="nav-link">Settings</a>*@
        </div>
        <div class="nav-right">
            <input class="search-input" placeholder="Cari berdasarkan Job/Supir" @bind="searchTerm" @bind:event="oninput" />
        </div>
    </nav>

    <!-- MAIN CONTENT -->
    <main class="main-content">
        <div class="content-box">
            <div class="navbar filter-controls">
                <div class="nav-left">
                    <label>Date Range Filter</label>
                    <InputDate @bind-Value="_startDate" TValue="DateTime?" class="filter-date" />
                    <InputDate @bind-Value="_endDate" TValue="DateTime?" class="filter-date" />
                    <button @onclick="ApplyAllFilters">Filter</button>
                    <button @onclick="ClearFilters">Clear</button>
                </div>
                <div class="nav-right">
                    <label>Quick Filter</label>
                    <select class="filter-dropdown" @bind="selectedQuickFilter">
                        <option value="" disabled>--Pilih--</option>
                        <option value="AllTime">All Time</option>
                        <option value="Today">Today</option>
                        <option value="Yesterday">Yesterday</option>
                        <option value="ThisWeek">This Week</option>
                        <option value="LastWeek">Last Week</option>
                        <option value="MonthToDate">Month to Date</option>
                        <option value="LastMonth">Last Month</option>
                        <option value="YearToDate">Year to Date</option>
                    </select>
                </div>
                
            </div>
            
           

            <div class="footer-controls">
                <button @onclick="PrintPage" class="print"></button>
                <div class="pagination normal-screen">
                    <button @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                    <span class="pt-5">Page: @currentPage</span>
                    <button @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == TotalPages)">Next</button>
                </div>
                <button class="btn btn-success mb-3" @onclick="() => modalRef.Open()">Tambah Log</button>
                <div class="pagination responsive">
                    <button @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
                    <span class="pt-5">Page: @currentPage</span>
                    <button @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == TotalPages)">Next</button>
                </div>
                <CreateLogModal @ref="modalRef" OnSaved="ReloadLogs" />
            </div>
            <!-- TABLE -->
            <div id="print-area" class="table-container">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th @onclick="@(() => SortBy("Tanggal"))">Tanggal</th>
                            <th>Pengisian Bensin (L)</th>
                            <th>Harga BBM</th>
                            <th>Adometer Buka</th>
                            <th>Adometer Tutup</th>
                            <th>KM</th>
                            <th>Total BBM (Rp)</th>
                            <th>Biaya Toll (Rp)</th>
                            <th>Biaya Parkir (Rp)</th>
                            <th>Grand Total</th>
                            <th>Job Number</th>
                            <th>Driver</th>
                            <th>Efisiensi</th>
                            <th colspan="2" class="no-print">Aksi</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (GetCurrentPageLogs() is not null && GetCurrentPageLogs().Count > 0)
                        {
                            int no = ((currentPage - 1) * pageSize) + 1;
                            @foreach (var log in GetCurrentPageLogs())
                            {
                                <tr>
                                    <td>@no</td>
                                    <td>@log.Tanggal.ToString("dd/MM/yyyy")</td>
                                    <td>@log.Qty_L</td>
                                    <td>@log.Harga_BBM_Rp</td>
                                    <td>@log.Adometer_Buka</td>
                                    <td>@log.Adometer_Tutup</td>
                                    <td>@log.KM</td>
                                    <td>@log.Total_BBM_Rp.ToString("N0")</td>
                                    <td>@log.Biaya_Toll_Rp</td>
                                    <td>@log.Parkir_Rp</td>
                                    <td>@log.Grand_Total.ToString("N0")</td>
                                    <td>@log.Job_Number</td>
                                    <td>@log.Supir</td>
                                    <td>@log.Efisiensi_BBM</td>
                                    <td class="no-print">
                                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(log.ID)">Hapus</button>
                                    </td>
                                    <td class="no-print">
                                        <button class="btn btn-sm btn-warning me-2" @onclick="() => editModalRef?.OpenAsync(log.ID)">Edit</button>
                                    </td>
                                </tr>
                                no++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7">Tidak ada data ditemukan.</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <EditLogModal @ref="editModalRef" OnSaved="ReloadLogs" />
            </div>

            <!-- FOOTER -->
            
        </div>
    </main>
</div>


@code {
    private List<TransportLog> _logs = new();
    private List<TransportLog> _filteredLogs = new();
    private string _searchTerm = string.Empty;
    private bool sortAscending = true;
    private string currentSortField = string.Empty;
    private int currentPage = 1;
    private int pageSize = 25;
    private int TotalPages => (int)Math.Ceiling((double)_filteredLogs.Count / pageSize);
    private EditLogModal? editModalRef;

    protected override async Task OnInitializedAsync()
    {
        _logs = await LogService.GetAllLogsAsync();
        _filteredLogs = _logs;
    }

    private async Task ConfirmDelete(int id)
    {
        @*bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Yakin ingin menghapus data dengan Log ini {id}?");*@
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Yakin ingin menghapus data dengan Log ini?");
        if (confirmed)
        {
            await LogService.DeleteAsync(id);
            _logs = await LogService.GetAllLogsAsync();
            ApplyAllFilters();
        }
    }

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                ApplyAllFilters();
            }
        }
    }

    private void ApplyAllFilters()
    {
        IEnumerable<TransportLog> filtered = _logs;

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(log =>
                (!string.IsNullOrEmpty(log.Supir) && log.Supir.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(log.Job_Number) && log.Job_Number.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        if (_startDate.HasValue && _endDate.HasValue)
        {
            filtered = filtered.Where(log =>
                log.Tanggal.Date >= _startDate.Value.Date &&
                log.Tanggal.Date <= _endDate.Value.Date);
        }

        _filteredLogs = filtered.ToList();
        currentPage = 1;
    }

    private void SortBy(string field)
    {
        if (currentSortField == field)
            sortAscending = !sortAscending;
        else
        {
            currentSortField = field;
            sortAscending = true;
        }

        _filteredLogs = sortAscending
            ? _filteredLogs.OrderBy(log => GetSortValue(log, field)).ToList()
            : _filteredLogs.OrderByDescending(log => GetSortValue(log, field)).ToList();
    }

    private object? GetSortValue(TransportLog log, string field) => field switch
    {
        "Tanggal" => log.Tanggal,
        "Supir" => log.Supir,
        _ => null
    };

    private async Task PrintPage() => await JS.InvokeVoidAsync("window.print");

    private DateTime? _startDate { get; set; }
    private DateTime? _endDate { get; set; }

    private void ApplyDateFilter() => ApplyAllFilters();

    private string _selectedQuickFilter = "";

    private string selectedQuickFilter
    {
        get => _selectedQuickFilter;
        set
        {
            if (_selectedQuickFilter != value)
            {
                _selectedQuickFilter = value;
                ApplyQuickDateFilter();
            }
        }
    }

    private void ApplyQuickDateFilter()
    {
        var today = DateTime.Today;

        switch (selectedQuickFilter)
        {
            case "AllTime":
                _startDate = null;
                _endDate = null;
                break;
            case "Today":
                _startDate = _endDate = today;
                break;
            case "Yesterday":
                _startDate = _endDate = today.AddDays(-1);
                break;
            case "ThisWeek":
                int diff = (7 + (today.DayOfWeek - DayOfWeek.Monday)) % 7;
                _startDate = today.AddDays(-diff);
                _endDate = today;
                break;
            case "LastWeek":
                int daysSinceMonday = (7 + (today.DayOfWeek - DayOfWeek.Monday)) % 7;
                var lastWeekEnd = today.AddDays(-(daysSinceMonday + 1));
                var lastWeekStart = lastWeekEnd.AddDays(-6);
                _startDate = lastWeekStart;
                _endDate = lastWeekEnd;
                break;
            case "MonthToDate":
                _startDate = new DateTime(today.Year, today.Month, 1);
                _endDate = today;
                break;
            case "LastMonth":
                var firstDayThisMonth = new DateTime(today.Year, today.Month, 1);
                var lastMonthEnd = firstDayThisMonth.AddDays(-1);
                var lastMonthStart = new DateTime(lastMonthEnd.Year, lastMonthEnd.Month, 1);
                _startDate = lastMonthStart;
                _endDate = lastMonthEnd;
                break;
            case "YearToDate":
                _startDate = new DateTime(today.Year, 1, 1);
                _endDate = today;
                break;
            default:
                return;
        }
        ApplyAllFilters();
    }

    private List<TransportLog> GetCurrentPageLogs() => _filteredLogs
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }

    private void NextPage() => currentPage = currentPage < TotalPages ? currentPage + 1 : currentPage;
    private void PrevPage() => currentPage = currentPage > 1 ? currentPage - 1 : currentPage;

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _startDate = null;
        _endDate = null;
        _selectedQuickFilter = "";
        ApplyAllFilters();
    }

    //PopupModal
    private CreateLogModal? modalRef;

    private async Task ReloadLogs()
    {
        _logs = await LogService.GetAllLogsAsync();
        ApplyAllFilters(); // update filtered & pagination
    }
}
