@page "/"
@using Microsoft.AspNetCore.Components.Web
@using VehicleMonitoringWebApp.Services
@using VehicleMonitoringWebApp.Models
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@inject TransportLogService LogService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="layout">
    <!-- Side Nav -->
    <!--<div class="sidenav">
        <div class="logo-placeholder"></div>
        <ul class="nav-menu">
            <li><a href="#">Dashboard</a></li>
            <li><a href="#">Data Log</a></li>
            <li><a href="#">Settings</a></li>
        </ul>
            </div>-->

    <!-- Main Content -->
    <div class="main-content">
        <div class="top-controls">
            <input class="form-control search-input" placeholder="Cari berdasarkan Job/Supir" @bind="searchTerm" @bind:event="oninput" />

            <div class="filter-row">
                <label>Date Range Filter</label>
                <InputDate @bind-Value="_startDate" TValue="DateTime?" class="form-control filter-date" />
                <InputDate @bind-Value="_endDate" TValue="DateTime?" class="form-control filter-date" />
                <button class="btn btn-sm btn-primary" @onclick="ApplyDateFilter">Filter</button>
                <button class="btn btn-outline-dark" @onclick="ClearFilters">Clear Filter</button>
            </div>

            <div class="filter-row">
                <label>Quick Date Filter</label>
                <select class="form-control filter-dropdown" id="quickFilter" @bind="selectedQuickFilter">
                    <option value="" disabled>--Pilih--</option>
                    <option value="AllTime">All Time</option>
                    <option value="Today">Today</option>
                    <option value="Yesterday">Yesterday</option>
                    <option value="ThisWeek">This Week</option>
                    <option value="LastWeek">Last Week</option>
                    <option value="MonthToDate">Month to Date</option>
                    <option value="LastMonth">Last Month</option>
                    <option value="YearToDate">Year to Date</option>
                </select>
            </div>
        </div>

        <!-- Table -->
        <div id="print-area">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>No</th>
                        <th @onclick="@(() => SortBy("Tanggal"))">Tanggal</th>
                        <th>Pengisian Bensin (L)</th>
                        <th>Harga BBM</th>
                        <th>Adometer Buka</th>
                        <th>Adometer Tutup</th>
                        <th>KM</th>
                        <th>Total BBM (Rp)</th>
                        <th>Biaya Toll (Rp)</th>
                        <th>Biaya Parkir (Rp)</th>
                        <th>Grand Total</th>
                        <th>Job Number</th>
                        <th>Supir</th>
                        <th>Efisiensi</th>
                        <th colspan="2">Aksi</th>
                    </tr>
                </thead>
                <tbody>
                    @if (GetCurrentPageLogs() is not null && GetCurrentPageLogs().Count > 0)
                    {
                        int no = 1;
                        @foreach (var log in GetCurrentPageLogs())
                        {
                            <tr>
                                <td>@no</td>
                                <td>@log.Tanggal.ToString("dd/MM/yyyy")</td>
                                <td>@log.Qty_L</td>
                                <td>@log.Harga_BBM_Rp</td>
                                <td>@log.Adometer_Buka</td>
                                <td>@log.Adometer_Tutup</td>
                                <td>@log.KM</td>
                                <td>@log.Total_BBM_Rp.ToString("N0")</td>
                                <td>@log.Biaya_Toll_Rp</td>
                                <td>@log.Parkir_Rp</td>
                                <td>@log.Grand_Total.ToString("N0")</td>
                                <td>@log.Job_Number</td>
                                <td>@log.Supir</td>
                                <td>@log.Efisiensi_BBM</td>
                                <td class="no-print">
                                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(log.ID)">Hapus</button>
                                </td>
                                <td class="no-print">
                                    <button class="btn btn-sm btn-warning me-2" @onclick="@(() => Navigation.NavigateTo($"/edit/{log.ID}"))">Edit</button>
                                </td>
                            </tr>
                            no++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">Tidak ada data ditemukan.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <span>Page: @currentPage</span>
        <!-- Footer: Print & Pagination -->
        <div class="footer-controls">
            
            <button class="btn btn-secondary btn-sm" @onclick="PrintPage">Print</button>
            <div class="pagination-footer">
                
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                    </li>
                    <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                    </li>
                </ul>
            </div>
            <button @onclick='() => Navigation.NavigateTo("/create")'>Tambah</button>
        </div>
    </div>
</div>




@code {
    private List<TransportLog> _logs = new();
    private List<TransportLog> _filteredLogs = new();
    private string _searchTerm = string.Empty;
    private bool sortAscending = true;
    private string currentSortField = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)_filteredLogs.Count / pageSize);

    //Load data block
    protected override async Task OnInitializedAsync()
    {
        _logs = await LogService.GetAllLogsAsync();
        _filteredLogs = _logs;
    }

    //Delete button block
    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Yakin ingin menghapus data dengan ID {id}?");
        if (confirmed)
        {
            await LogService.DeleteAsync(id);
            _logs = await LogService.GetAllLogsAsync(); // refresh tabel
        }
    }

    //Filter feature block
    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            _filteredLogs = _logs;
        }
        else
        {
            _filteredLogs = _logs.Where(log =>
                (!string.IsNullOrEmpty(log.Supir) && log.Supir.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(log.Job_Number) && log.Job_Number.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
        currentPage = 1;
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                ApplyFilter(); // ⬅️ panggil filter setiap kali nilai berubah
            }
        }
    }

    //Sort feature block
    private void SortBy(string field)
    {
        if (currentSortField == field)
            sortAscending = !sortAscending;
        else
        {
            currentSortField = field;
            sortAscending = true;
        }

        _filteredLogs = sortAscending
            ? _filteredLogs.OrderBy(log => GetSortValue(log, field)).ToList()
            : _filteredLogs.OrderByDescending(log => GetSortValue(log, field)).ToList();
    }

    private object? GetSortValue(TransportLog log, string field)
    {
        return field switch
        {
            "Tanggal" => log.Tanggal,
            "Supir" => log.Supir,
            _ => null
        };
    }

    //Print feature block
    private async Task PrintPage()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    //Date filter block
    private DateTime? _startDate { get; set; }
    private DateTime? _endDate { get; set; }

    private void ApplyDateFilter()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            _filteredLogs = _logs
                .Where(log => log.Tanggal.Date >= _startDate.Value.Date && log.Tanggal.Date <= _endDate.Value.Date)
                .ToList();
        }
        else
        {
            _filteredLogs = _logs; // fallback
        }
        currentPage = 1;
    }

    //Quick Date Filter
    private string _selectedQuickFilter = "";

    private string selectedQuickFilter
    {
        get => _selectedQuickFilter;
        set
        {
            if (_selectedQuickFilter != value)
            {
                _selectedQuickFilter = value;
                ApplyQuickDateFilter();
            }
        }
    }

    private void ApplyDateRangeFilter()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            _filteredLogs = _logs
                .Where(log => log.Tanggal.Date >= _startDate.Value.Date && log.Tanggal.Date <= _endDate.Value.Date)
                .ToList();
        }
        else
        {
            _filteredLogs = _logs;
        }
    }

    private void ApplyQuickDateFilter()
    {
        var today = DateTime.Today;

        switch (selectedQuickFilter)
        {
            case "AllTime":
                _startDate = null;
                _endDate = null;
                break;
            case "Today":
                _startDate = _endDate = today;
                break;
            case "Yesterday":
                _startDate = _endDate = today.AddDays(-1);
                break;
            case "ThisWeek":
                int diff = (7 + (today.DayOfWeek - DayOfWeek.Monday)) % 7;
                _startDate = today.AddDays(-diff);
                _endDate = today;
                break;
            case "LastWeek":
                int daysSinceMonday = (7 + (today.DayOfWeek - DayOfWeek.Monday)) % 7;
                var lastWeekEnd = today.AddDays(-(daysSinceMonday + 1));
                var lastWeekStart = lastWeekEnd.AddDays(-6);
                _startDate = lastWeekStart;
                _endDate = lastWeekEnd;
                break;
            case "MonthToDate":
                _startDate = new DateTime(today.Year, today.Month, 1);
                _endDate = today;
                break;
            case "LastMonth":
                var firstDayThisMonth = new DateTime(today.Year, today.Month, 1);
                var lastMonthEnd = firstDayThisMonth.AddDays(-1);
                var lastMonthStart = new DateTime(lastMonthEnd.Year, lastMonthEnd.Month, 1);
                _startDate = lastMonthStart;
                _endDate = lastMonthEnd;
                break;
            case "YearToDate":
                _startDate = new DateTime(today.Year, 1, 1);
                _endDate = today;
                break;
            default:
                return;
        }
        ApplyDateRangeFilter(); // Panggil filter setelah range diset
        currentPage = 1;
    }

    // Pagination
    private List<TransportLog> GetCurrentPageLogs()
    {
        return _filteredLogs
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            StateHasChanged(); // ✅ WAJIB agar UI update
        }
    }

    //Code block untuk clear filter
    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _startDate = null;
        _endDate = null;
        _selectedQuickFilter = "";
        _filteredLogs = _logs;
        currentPage = 1;
    }
}